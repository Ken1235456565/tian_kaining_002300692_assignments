package ui.page;

/*
 * CreateProductJPanel.java
 *
 */

import java.awt.CardLayout;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.APP;
import model.Book;
import model.Branch;
import model.Customer;
import model.Library;
import model.RentalRequest;


/**
 *
 * @author Rushabh
 */
public class F3_S3_BrowBookCatalog extends javax.swing.JPanel {

    private JPanel workArea;
    private Customer customer;
    private List<Book> allBooks;
    private List<Book> displayedBooks;
    private List<Library> libraries;
    private Library selectedLibrary;
    private SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");

    /**
     * Creates new form CreateProductJPanel
     */
    public F3_S3_BrowBookCatalog(JPanel workArea, Customer customer) {
        initComponents();
        this.workArea = workArea;
        this.customer = customer;
        
        // Get all libraries and books from the APP singleton
        APP app = APP.getInstance();
        this.libraries = new ArrayList<>();
        for (Branch branch : app.getBranches()) {
            this.libraries.add(branch.getLibrary());
        }
        
        // Add main library
        this.libraries.add(app.getMainLibrary());
        
        // Populate the library combo box
        populateLibraryCombo();
        
        // Get all books across libraries
        this.allBooks = new ArrayList<>();
        for (Library library : libraries) {
            this.allBooks.addAll(library.getBooks());
        }
        
        // Initially display all books
        this.displayedBooks = new ArrayList<>(allBooks);
        
        cmbLibruaryBranch.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
        cmbLibruaryBranchActionPerformed(evt);
        }
    });
        
        refreshTable();
    }
    
    private void populateLibraryCombo() {
        DefaultComboBoxModel<Object> model = new DefaultComboBoxModel<>();
        model.addElement("All Libraries");
        
        for (Library library : libraries) {
            model.addElement(library);
        }
        
        cmbLibruaryBranch.setModel(model);
    }
    
    private void refreshTable() {
        DefaultTableModel model = (DefaultTableModel) tblFeatures.getModel();
        model.setRowCount(0); // Clear existing rows
        
        // Populate the table with book data
        for (Book book : displayedBooks) {
            Object[] row = new Object[4];
            row[0] = book.getSerialNumber();
            row[1] = book.getName();
            row[2] = String.format("$%.2f", book.getRentalPricePerDay());
            row[3] = book.isAvailable();
            
            model.addRow(row);
        }
    }
    
    private void cmbLibruaryBranchActionPerformed(java.awt.event.ActionEvent evt) {
    int selectedIndex = cmbLibruaryBranch.getSelectedIndex();
    
    if (selectedIndex == 0) {
        // "All Libraries" 选项 - 显示所有书籍
        this.displayedBooks = new ArrayList<>(allBooks);
    } else {
        // 特定图书馆选项 - 筛选该图书馆的书籍
        Library selectedLib = (Library) cmbLibruaryBranch.getSelectedItem();
        this.selectedLibrary = selectedLib;
        
        this.displayedBooks = new ArrayList<>();
        for (Book book : allBooks) {
            if (book.getLibrary().equals(selectedLib)) {
                displayedBooks.add(book);
            }
        }
    }
    
    // 更新表格
    refreshTable();
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        btnRent = new javax.swing.JButton();
        backButton1 = new javax.swing.JButton();
        btnViewDetails = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblFeatures = new javax.swing.JTable();
        btnSearch = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        cmbLibruaryBranch = new javax.swing.JComboBox<>();
        lblTitle1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        lblTitle.setText("Browse Books");

        btnRent.setText("Rent");
        btnRent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRentActionPerformed(evt);
            }
        });

        backButton1.setText("<< Back");
        backButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButton1ActionPerformed(evt);
            }
        });

        btnViewDetails.setText("View Details");
        btnViewDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewDetailsActionPerformed(evt);
            }
        });

        tblFeatures.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Serial Numbe", "Book Name", "Price", "Availability"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblFeatures);

        btnSearch.setText("Search Item");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        lblTitle1.setText("Libruary Branch");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backButton1)
                        .addGap(38, 38, 38)
                        .addComponent(lblTitle))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblTitle1)
                            .addGap(18, 18, 18)
                            .addComponent(cmbLibruaryBranch, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(btnSearch))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(btnRent)
                                .addGap(29, 29, 29)
                                .addComponent(btnViewDetails))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 635, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(151, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTitle)
                    .addComponent(backButton1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearch)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbLibruaryBranch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTitle1))
                .addGap(23, 23, 23)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnViewDetails)
                    .addComponent(btnRent))
                .addContainerGap(177, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButton1ActionPerformed
        // TODO add your handling code here:
        CardLayout layout = (CardLayout) workArea.getLayout();
    layout.show(workArea, "CustomerNavPanel");
    }//GEN-LAST:event_backButton1ActionPerformed

    private void btnViewDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewDetailsActionPerformed
        // TODO add your handling code here:
        // View book details
        int selectedRow = tblFeatures.getSelectedRow();
        
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, 
                "Please select a book to view details.", 
                "No Selection", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // Get the book from the selected row
        String serialNumber = (String) tblFeatures.getValueAt(selectedRow, 0);
        
        // Find the book in the displayed books
        Book selectedBook = null;
        for (Book book : displayedBooks) {
            if (book.getSerialNumber().equals(serialNumber)) {
                selectedBook = book;
                break;
            }
        }
        
        if (selectedBook != null) {
            // Display book details
            StringBuilder details = new StringBuilder();
            details.append("Serial Number: ").append(selectedBook.getSerialNumber()).append("\n");
            details.append("Title: ").append(selectedBook.getName()).append("\n");
            details.append("Author: ").append(selectedBook.getAuthor().getName()).append("\n");
            details.append("Registered Date: ").append(dateFormat.format(selectedBook.getRegisteredDate())).append("\n");
            details.append("Language: ").append(selectedBook.getLanguage()).append("\n");
            details.append("Pages: ").append(selectedBook.getNumberOfPages()).append("\n");
            details.append("Availability: ").append(selectedBook.isAvailable() ? "Available" : "Not Available").append("\n");
            details.append("Library: ").append(selectedBook.getLibrary().getLibraryName()).append("\n");
            details.append("Rental Price: $").append(String.format("%.2f", selectedBook.getRentalPricePerDay())).append(" per day\n");
            
            JOptionPane.showMessageDialog(this, details.toString(), "Book Details", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnViewDetailsActionPerformed

    private void btnRentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRentActionPerformed
        // 获取选定行
    int selectedRow = tblFeatures.getSelectedRow();
    
    if (selectedRow < 0) {
        JOptionPane.showMessageDialog(this, 
            "Please select a book to rent.", 
            "No Selection", JOptionPane.WARNING_MESSAGE);
        return;
    }
    
    // 获取来自选定行的书籍
    String serialNumber = (String) tblFeatures.getValueAt(selectedRow, 0);
    boolean isAvailable = (boolean) tblFeatures.getValueAt(selectedRow, 3);
    
    // 检查书籍是否可用
    if (!isAvailable) {
        JOptionPane.showMessageDialog(this, 
            "Sorry, this book is currently not available.", 
            "Book Unavailable", JOptionPane.INFORMATION_MESSAGE);
        return;
    }
    
    // 在显示的书籍中找到所选书籍
    Book selectedBook = null;
    for (Book book : displayedBooks) {
        if (book.getSerialNumber().equals(serialNumber)) {
            selectedBook = book;
            break;
        }
    }
    
    if (selectedBook != null) {
        // 再次检查书籍可用性（防止并发租借）
        if (!selectedBook.isAvailable()) {
            JOptionPane.showMessageDialog(this, 
                "Sorry, this book was just rented by someone else.", 
                "Book Unavailable", JOptionPane.INFORMATION_MESSAGE);
            refreshTable(); // 刷新表格反映最新状态
            return;
        }
        
        // 询问租借时长
        String durationStr = JOptionPane.showInputDialog(this, 
            "Enter rental duration in days:", 
            "Rental Duration", JOptionPane.QUESTION_MESSAGE);
        
        if (durationStr == null || durationStr.trim().isEmpty()) {
            return; // 用户取消
        }
        
        try {
            int duration = Integer.parseInt(durationStr);
            
            if (duration <= 0) {
                JOptionPane.showMessageDialog(this, 
                    "Rental duration must be a positive number.", 
                    "Invalid Input", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // 计算价格
            double price = selectedBook.getRentalPricePerDay() * duration;
            
            // 确认租借
            int confirm = JOptionPane.showConfirmDialog(this, 
                "You are about to rent '" + selectedBook.getName() + "' for " + duration + 
                " days at $" + String.format("%.2f", price) + ". Proceed?", 
                "Confirm Rental", JOptionPane.YES_NO_OPTION);
            
            if (confirm == JOptionPane.YES_OPTION) {
                // 创建租借请求
                RentalRequest request = customer.placeRentalRequest(
                    selectedBook, selectedBook.getLibrary(), duration, price);
                
                // 检查请求是否成功创建
                if (request == null) {
                    JOptionPane.showMessageDialog(this, 
                        "Sorry, this book is no longer available for rent.", 
                        "Rent Failed", JOptionPane.ERROR_MESSAGE);
                    refreshTable(); // 刷新表格反映最新状态
                    return;
                }
                
                // 找到相应的分支并添加租借请求
                APP app = APP.getInstance();
                for (Branch branch : app.getBranches()) {
                    if (branch.getLibrary().equals(selectedBook.getLibrary())) {
                        branch.addRentalRequest(request);
                        break;
                    }
                }
                
                // 更新UI
                JOptionPane.showMessageDialog(this, 
                    "Rental request placed successfully! Your request ID is: " + request.getRequestId(), 
                    "Success", JOptionPane.INFORMATION_MESSAGE);
                
                refreshTable();
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, 
                "Please enter a valid number for duration.", 
                "Invalid Input", JOptionPane.ERROR_MESSAGE);
        }
    }
    }//GEN-LAST:event_btnRentActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        String searchTerm = jTextField1.getText().trim().toLowerCase();
    
    if (searchTerm.isEmpty()) {
        // 如果搜索框为空，恢复到当前库的所有书籍
        if (selectedLibrary == null) {
            this.displayedBooks = new ArrayList<>(allBooks);
        } else {
            this.displayedBooks = new ArrayList<>();
            for (Book book : allBooks) {
                if (book.getLibrary().equals(selectedLibrary)) {
                    displayedBooks.add(book);
                }
            }
        }
    } else {
        // 根据搜索词筛选书籍
        List<Book> searchBase = selectedLibrary == null ? allBooks : 
            allBooks.stream()
                .filter(book -> book.getLibrary().equals(selectedLibrary))
                .collect(java.util.stream.Collectors.toList());
        
        this.displayedBooks = new ArrayList<>();
        for (Book book : searchBase) {
            if (book.getName().toLowerCase().contains(searchTerm) || 
                book.getSerialNumber().toLowerCase().contains(searchTerm) ||
                book.getAuthor().getName().toLowerCase().contains(searchTerm)) {
                displayedBooks.add(book);
            }
        }
    }
    
    refreshTable();
    }//GEN-LAST:event_btnSearchActionPerformed

   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton1;
    private javax.swing.JButton btnRent;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnViewDetails;
    private javax.swing.JComboBox<Object> cmbLibruaryBranch;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblTitle1;
    private javax.swing.JTable tblFeatures;
    // End of variables declaration//GEN-END:variables
}
