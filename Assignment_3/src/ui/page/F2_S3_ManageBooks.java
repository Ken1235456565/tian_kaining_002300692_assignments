package ui.page;

import java.awt.CardLayout;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.*;
/**
 *
 * @author Rushabh
 */
public class F2_S3_ManageBooks extends javax.swing.JPanel {
        private JPanel workArea;
    private User branchManager;
    private Library library;
    private SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
   

    /**
     * Creates new form CreateProductJPanel
     */
    public F2_S3_ManageBooks(JPanel workArea, User branchManager) {
        initComponents();
        this.workArea = workArea;
        this.branchManager = branchManager;
        
        // Get the library associated with this branch manager
        APP app = APP.getInstance();
        for (Branch branch : app.getBranches()) {
            if (branch.getManagerName().equals(branchManager.getUsername())) {
                this.library = branch.getLibrary();
                break;
            }
        }
        
        // If no library found, create a default one
        if (this.library == null) {
            this.library = app.getMainLibrary();
        }
        
        // Add table cell edit listener
        tblFeatures.getModel().addTableModelListener(e -> {
            // Handle any table edits here if needed
        });

        refreshTable();
    }
    
    public void refreshTable() {
        DefaultTableModel model = (DefaultTableModel) tblFeatures.getModel();
        model.setRowCount(0); // Clear existing rows
        
        if (library != null) {
            // Get all books from the library
            List<Book> books = library.getBooks();
            
            // Populate the table with book data
            for (Book book : books) {
                Object[] row = new Object[6];
                row[0] = book.getSerialNumber();
                row[1] = book.getName();
                row[2] = dateFormat.format(book.getRegisteredDate());
                row[3] = book.getLanguage();
                row[4] = book.getNumberOfPages();
                row[5] = book.isAvailable();
                
                model.addRow(row);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        btnNewBook = new javax.swing.JButton();
        btnDeleteBook = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblFeatures = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));

        lblTitle.setText("Manage Books");

        btnNewBook.setText("New Book");
        btnNewBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewBookActionPerformed(evt);
            }
        });

        btnDeleteBook.setText("Delete Boak");
        btnDeleteBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteBookActionPerformed(evt);
            }
        });

        backButton.setText("<< Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        tblFeatures.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Serial Numbe", "Book Name", "registered date", "Language", "No. of pages", "Availability"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.Integer.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblFeatures);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(btnNewBook)
                        .addGap(18, 18, 18)
                        .addComponent(btnDeleteBook))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 635, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(backButton)
                        .addGap(38, 38, 38)
                        .addComponent(lblTitle)))
                .addContainerGap(151, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTitle)
                    .addComponent(backButton))
                .addGap(64, 64, 64)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNewBook)
                    .addComponent(btnDeleteBook))
                .addContainerGap(177, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        CardLayout layout = (CardLayout) workArea.getLayout();
    layout.show(workArea, "BranchManagerPanel");
    }//GEN-LAST:event_backButtonActionPerformed


    private void btnNewBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewBookActionPerformed
        // TODO add your handling code here:
        F2_S4_Add_Book addBookPanel = new F2_S4_Add_Book(workArea, library);
        workArea.add("AddBookPanel", addBookPanel);
        CardLayout layout = (CardLayout) workArea.getLayout();
        layout.show(workArea, "AddBookPanel");
    }//GEN-LAST:event_btnNewBookActionPerformed

    private void btnDeleteBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteBookActionPerformed
        // TODO add your handling code here:
        // Get the selected row
        int selectedRow = tblFeatures.getSelectedRow();
        
        // Check if a row is selected
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, 
                "Please select a book to remove.", 
                "No Selection", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // Get the book ID from the selected row
        String serialNumber = (String) tblFeatures.getValueAt(selectedRow, 0);
        
        // Find the book in the library
        Book bookToRemove = library.findBookBySerialNumber(serialNumber);
        
        // Check if the book is currently rented out
        if (bookToRemove != null && !bookToRemove.isAvailable()) {
            JOptionPane.showMessageDialog(this, 
                "Cannot remove a book that is currently checked out.", 
                "Removal Failed", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Confirm removal
        int confirm = JOptionPane.showConfirmDialog(this, 
            "Are you sure you want to remove book " + bookToRemove.getName() + "?", 
            "Confirm Removal", JOptionPane.YES_NO_OPTION);
        
        if (confirm == JOptionPane.YES_OPTION && bookToRemove != null) {
            // Remove the book from the library
            library.getBooks().remove(bookToRemove);
            JOptionPane.showMessageDialog(this, "Book removed successfully.");
            refreshTable(); // Refresh the table to reflect changes
        }
    }//GEN-LAST:event_btnDeleteBookActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JButton btnDeleteBook;
    private javax.swing.JButton btnNewBook;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblFeatures;
    // End of variables declaration//GEN-END:variables
}
