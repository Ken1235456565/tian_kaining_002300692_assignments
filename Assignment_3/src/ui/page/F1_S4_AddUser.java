/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.page;

import java.awt.CardLayout;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import model.APP;
import model.Branch;
import model.Customer;
import model.CustomerDirectory;
import model.Profile;
import model.Role;
import model.User;
import model.UserDirectory;

/**
 *
 * @author archil
 */
public class F1_S4_AddUser extends javax.swing.JPanel {

    private JPanel mainWorkArea;
    private UserDirectory userDirectory;
    private APP app;

    public F1_S4_AddUser(JPanel mainWorkArea, UserDirectory userDirectory) {
        initComponents(); // This calls the auto-generated method
        this.mainWorkArea = mainWorkArea;
        this.userDirectory = userDirectory;
        this.app = APP.getInstance();
        
        // Setup role combo box
        setupRoleCombo();
        
        // Setup branch combo box
        setupBranchCombo();
    }
    
    private void setupRoleCombo() {
        cmbRole.removeAllItems();
        cmbRole.addItem("");
        cmbRole.addItem("Admin");
        cmbRole.addItem("Branch Manager");
        cmbRole.addItem("Customer");
    }
    
    private void setupBranchCombo() {
        // Clear existing items
        cmbBranch.removeAllItems();
        cmbBranch.addItem("");  // Add empty option
        
        // Store mapping of branch names to Branch objects
        for (Branch branch : app.getBranches()) {
            // Add only the branch name to the combo box
            cmbBranch.addItem(branch.getName());
        }
    }
    

    // Helper method to find branch by name
    private Branch findBranchByName(String branchName) {
        if (branchName == null || branchName.isEmpty()) {
            return null;
        }
        
        for (Branch branch : app.getBranches()) {
            if (branch.getName().equals(branchName)) {
                return branch;
            }
        }
        return null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        lblRole = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        lblSupplier = new javax.swing.JLabel();
        lblRole1 = new javax.swing.JLabel();
        txtUserName = new javax.swing.JTextField();
        txtPassword = new javax.swing.JTextField();
        txtlbl = new javax.swing.JLabel();
        txtUserID = new javax.swing.JTextField();
        cmbRole = new javax.swing.JComboBox<>();
        backButton1 = new javax.swing.JButton();
        lblSupplier2 = new javax.swing.JLabel();
        cmbBranch = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(255, 255, 255));

        lblTitle.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblTitle.setText("New User Account");

        lblRole.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblRole.setText("User Name:");

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        lblSupplier.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSupplier.setText("Password:");

        lblRole1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblRole1.setText("Role:");

        txtlbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        txtlbl.setText("UserID:");

        cmbRole.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "SystemAdmin", "BranchManager", "Customer" }));

        backButton1.setText("<< Back");
        backButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButton1ActionPerformed(evt);
            }
        });

        lblSupplier2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSupplier2.setText("Branch:");

        cmbBranch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(backButton1))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblRole1)
                            .addGap(18, 18, 18)
                            .addComponent(cmbRole, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(txtlbl)
                            .addGap(18, 18, 18)
                            .addComponent(txtUserID, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(269, 269, 269)
                                .addComponent(lblTitle))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addComponent(btnSave)
                                .addGap(34, 34, 34)))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblRole, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(lblSupplier, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(lblSupplier2, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                                .addComponent(txtUserName, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                                .addComponent(cmbBranch, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap(384, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lblRole, lblSupplier});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(backButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addComponent(lblTitle)
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRole1)
                    .addComponent(cmbRole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtlbl)
                    .addComponent(txtUserID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRole)
                    .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblSupplier2)
                    .addComponent(cmbBranch, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSupplier)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addComponent(btnSave)
                .addGap(220, 220, 220))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // Get input values
        String userId = txtUserID.getText().trim();
        String username = txtUserName.getText().trim();
        String password = txtPassword.getText().trim();
        String selectedRole = (String) cmbRole.getSelectedItem();
        String branchName = (String) cmbBranch.getSelectedItem();
        
        // Find selected branch by name
        Branch selectedBranch = findBranchByName(branchName);

        // Basic input validation
        if (userId.isEmpty() || username.isEmpty() || password.isEmpty() || 
            selectedRole == null || selectedRole.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "All fields are required!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // If role is Branch Manager, branch selection is required
        if (selectedRole.equals("Branch Manager") && selectedBranch == null) {
            JOptionPane.showMessageDialog(this, "Branch selection is required for Branch Managers!", 
                                         "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Check if username already exists
        if (userDirectory.findUserByUsername(username) != null) {
            JOptionPane.showMessageDialog(this, "Username already exists!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Create role
        Role role = new Role(selectedRole);

        // Create profile
        Profile profile = new Profile(role, userId);

        // Create user
        User newUser = new User(profile, username, password);

        // Add user to directory
        userDirectory.addUser(newUser);
        
        // If customer role, create customer record
        if (selectedRole.equals("Customer")) {
            CustomerDirectory customerDirectory = app.getCustomerDirectory();
            Customer customer = new Customer(userId, newUser);
            customerDirectory.addCustomer(customer);
        }
        
        // If branch manager, associate with branch
        if (selectedRole.equals("Branch Manager") && selectedBranch != null) {
            selectedBranch.setManagerName(username);
        }

        JOptionPane.showMessageDialog(this, "User created successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);

        // Return to previous panel
        CardLayout layout = (CardLayout) mainWorkArea.getLayout();
        layout.show(mainWorkArea, "ManageUsersPanel");
    }//GEN-LAST:event_btnSaveActionPerformed

    private void backButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButton1ActionPerformed
        CardLayout layout = (CardLayout) mainWorkArea.getLayout();
    layout.show(mainWorkArea, "ManageUsersPanel");
    }//GEN-LAST:event_backButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton1;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox<String> cmbBranch;
    private javax.swing.JComboBox<String> cmbRole;
    private javax.swing.JLabel lblRole;
    private javax.swing.JLabel lblRole1;
    private javax.swing.JLabel lblSupplier;
    private javax.swing.JLabel lblSupplier2;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtUserID;
    private javax.swing.JTextField txtUserName;
    private javax.swing.JLabel txtlbl;
    // End of variables declaration//GEN-END:variables
    
    
}
